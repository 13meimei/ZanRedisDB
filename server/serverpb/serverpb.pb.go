// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: serverpb.proto

/*
	Package serverpb is a generated protocol buffer package.

	It is generated from these files:
		serverpb.proto

	It has these top-level messages:
		RpcErr
		RaftLogData
		RaftReqs
*/
package serverpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RaftLogType int32

const (
	// indicate what stored in the data in raftlog
	EntryNormalRaw RaftLogType = 0
)

var RaftLogType_name = map[int32]string{
	0: "EntryNormalRaw",
}
var RaftLogType_value = map[string]int32{
	"EntryNormalRaw": 0,
}

func (x RaftLogType) String() string {
	return proto.EnumName(RaftLogType_name, int32(x))
}
func (RaftLogType) EnumDescriptor() ([]byte, []int) { return fileDescriptorServerpb, []int{0} }

type RpcErr struct {
	ErrType int32  `protobuf:"varint,1,opt,name=err_type,json=errType,proto3" json:"err_type,omitempty"`
	ErrCode int32  `protobuf:"varint,2,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	ErrMsg  string `protobuf:"bytes,3,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *RpcErr) Reset()                    { *m = RpcErr{} }
func (m *RpcErr) String() string            { return proto.CompactTextString(m) }
func (*RpcErr) ProtoMessage()               {}
func (*RpcErr) Descriptor() ([]byte, []int) { return fileDescriptorServerpb, []int{0} }

type RaftLogData struct {
	Type RaftLogType `protobuf:"varint,1,opt,name=type,proto3,enum=serverpb.RaftLogType" json:"type,omitempty"`
	// raft group for different partition has different name, so
	// we can make sure (term-index) is increased in same raft group.
	// (term-index) will be checked while replaying in remote cluster
	RaftGid       uint64 `protobuf:"varint,2,opt,name=raft_gid,json=raftGid,proto3" json:"raft_gid,omitempty"`
	RaftGroupName string `protobuf:"bytes,3,opt,name=raft_group_name,json=raftGroupName,proto3" json:"raft_group_name,omitempty"`
	Term          uint64 `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Index         uint64 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	RaftTimestamp int64  `protobuf:"varint,6,opt,name=raft_timestamp,json=raftTimestamp,proto3" json:"raft_timestamp,omitempty"`
	ShardingKey   []byte `protobuf:"bytes,7,opt,name=sharding_key,json=shardingKey,proto3" json:"sharding_key,omitempty"`
	Data          []byte `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RaftLogData) Reset()                    { *m = RaftLogData{} }
func (m *RaftLogData) String() string            { return proto.CompactTextString(m) }
func (*RaftLogData) ProtoMessage()               {}
func (*RaftLogData) Descriptor() ([]byte, []int) { return fileDescriptorServerpb, []int{1} }

type RaftReqs struct {
	RaftLog []*RaftLogData `protobuf:"bytes,1,rep,name=raft_log,json=raftLog" json:"raft_log,omitempty"`
}

func (m *RaftReqs) Reset()                    { *m = RaftReqs{} }
func (m *RaftReqs) String() string            { return proto.CompactTextString(m) }
func (*RaftReqs) ProtoMessage()               {}
func (*RaftReqs) Descriptor() ([]byte, []int) { return fileDescriptorServerpb, []int{2} }

func init() {
	proto.RegisterType((*RpcErr)(nil), "serverpb.RpcErr")
	proto.RegisterType((*RaftLogData)(nil), "serverpb.RaftLogData")
	proto.RegisterType((*RaftReqs)(nil), "serverpb.RaftReqs")
	proto.RegisterEnum("serverpb.RaftLogType", RaftLogType_name, RaftLogType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CrossClusterAPI service

type CrossClusterAPIClient interface {
	ApplyRaftReqs(ctx context.Context, in *RaftReqs, opts ...grpc.CallOption) (*RpcErr, error)
}

type crossClusterAPIClient struct {
	cc *grpc.ClientConn
}

func NewCrossClusterAPIClient(cc *grpc.ClientConn) CrossClusterAPIClient {
	return &crossClusterAPIClient{cc}
}

func (c *crossClusterAPIClient) ApplyRaftReqs(ctx context.Context, in *RaftReqs, opts ...grpc.CallOption) (*RpcErr, error) {
	out := new(RpcErr)
	err := grpc.Invoke(ctx, "/serverpb.CrossClusterAPI/ApplyRaftReqs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CrossClusterAPI service

type CrossClusterAPIServer interface {
	ApplyRaftReqs(context.Context, *RaftReqs) (*RpcErr, error)
}

func RegisterCrossClusterAPIServer(s *grpc.Server, srv CrossClusterAPIServer) {
	s.RegisterService(&_CrossClusterAPI_serviceDesc, srv)
}

func _CrossClusterAPI_ApplyRaftReqs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftReqs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrossClusterAPIServer).ApplyRaftReqs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.CrossClusterAPI/ApplyRaftReqs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrossClusterAPIServer).ApplyRaftReqs(ctx, req.(*RaftReqs))
	}
	return interceptor(ctx, in, info, handler)
}

var _CrossClusterAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.CrossClusterAPI",
	HandlerType: (*CrossClusterAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyRaftReqs",
			Handler:    _CrossClusterAPI_ApplyRaftReqs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverpb.proto",
}

func (m *RpcErr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcErr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerpb(dAtA, i, uint64(m.ErrType))
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerpb(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServerpb(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	return i, nil
}

func (m *RaftLogData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLogData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerpb(dAtA, i, uint64(m.Type))
	}
	if m.RaftGid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerpb(dAtA, i, uint64(m.RaftGid))
	}
	if len(m.RaftGroupName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServerpb(dAtA, i, uint64(len(m.RaftGroupName)))
		i += copy(dAtA[i:], m.RaftGroupName)
	}
	if m.Term != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintServerpb(dAtA, i, uint64(m.Term))
	}
	if m.Index != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintServerpb(dAtA, i, uint64(m.Index))
	}
	if m.RaftTimestamp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintServerpb(dAtA, i, uint64(m.RaftTimestamp))
	}
	if len(m.ShardingKey) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintServerpb(dAtA, i, uint64(len(m.ShardingKey)))
		i += copy(dAtA[i:], m.ShardingKey)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintServerpb(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *RaftReqs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftReqs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RaftLog) > 0 {
		for _, msg := range m.RaftLog {
			dAtA[i] = 0xa
			i++
			i = encodeVarintServerpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintServerpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RpcErr) Size() (n int) {
	var l int
	_ = l
	if m.ErrType != 0 {
		n += 1 + sovServerpb(uint64(m.ErrType))
	}
	if m.ErrCode != 0 {
		n += 1 + sovServerpb(uint64(m.ErrCode))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovServerpb(uint64(l))
	}
	return n
}

func (m *RaftLogData) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovServerpb(uint64(m.Type))
	}
	if m.RaftGid != 0 {
		n += 1 + sovServerpb(uint64(m.RaftGid))
	}
	l = len(m.RaftGroupName)
	if l > 0 {
		n += 1 + l + sovServerpb(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovServerpb(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovServerpb(uint64(m.Index))
	}
	if m.RaftTimestamp != 0 {
		n += 1 + sovServerpb(uint64(m.RaftTimestamp))
	}
	l = len(m.ShardingKey)
	if l > 0 {
		n += 1 + l + sovServerpb(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovServerpb(uint64(l))
	}
	return n
}

func (m *RaftReqs) Size() (n int) {
	var l int
	_ = l
	if len(m.RaftLog) > 0 {
		for _, e := range m.RaftLog {
			l = e.Size()
			n += 1 + l + sovServerpb(uint64(l))
		}
	}
	return n
}

func sovServerpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozServerpb(x uint64) (n int) {
	return sovServerpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RpcErr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcErr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcErr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrType", wireType)
			}
			m.ErrType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLogData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLogData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLogData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (RaftLogType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftGid", wireType)
			}
			m.RaftGid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftGid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftTimestamp", wireType)
			}
			m.RaftTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardingKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardingKey = append(m.ShardingKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardingKey == nil {
				m.ShardingKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftReqs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftReqs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftReqs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftLog = append(m.RaftLog, &RaftLogData{})
			if err := m.RaftLog[len(m.RaftLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServerpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServerpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthServerpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServerpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServerpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServerpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServerpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("serverpb.proto", fileDescriptorServerpb) }

var fileDescriptorServerpb = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0xe3, 0xee, 0x5f, 0xbc, 0xed, 0xb6, 0xb2, 0x8a, 0x30, 0x3d, 0x44, 0xe9, 0x4a, 0xa0,
	0xc0, 0xa1, 0xa0, 0x72, 0xe0, 0xc2, 0xa5, 0x2c, 0x15, 0x02, 0x4a, 0x85, 0xac, 0x4a, 0x1c, 0x23,
	0xb7, 0x99, 0x9a, 0x88, 0x24, 0x36, 0x63, 0x17, 0xc8, 0x99, 0x97, 0xe0, 0x91, 0x7a, 0xec, 0x23,
	0xd0, 0xe5, 0x45, 0x90, 0x9d, 0x4d, 0x04, 0x12, 0xb7, 0x99, 0xef, 0x9b, 0xcc, 0x2f, 0x33, 0x63,
	0x3a, 0xb7, 0x80, 0x5f, 0x01, 0xcd, 0xf9, 0x81, 0x41, 0xed, 0x34, 0x9b, 0x76, 0xf9, 0xde, 0xae,
	0xd2, 0x4a, 0x07, 0xf1, 0x89, 0x8f, 0x5a, 0x7f, 0xf1, 0x91, 0x8e, 0x85, 0xb9, 0x38, 0x46, 0x64,
	0xf7, 0xe9, 0x14, 0x10, 0x33, 0xd7, 0x18, 0xe0, 0x24, 0x21, 0xe9, 0x48, 0x4c, 0x00, 0xf1, 0xac,
	0x31, 0xd0, 0x59, 0x17, 0x3a, 0x07, 0xbe, 0xd1, 0x5b, 0x4b, 0x9d, 0x03, 0xbb, 0x47, 0x7d, 0x98,
	0x55, 0x56, 0xf1, 0x41, 0x42, 0xd2, 0x3b, 0x62, 0x0c, 0x88, 0xef, 0xad, 0x5a, 0xfc, 0xd8, 0xa0,
	0x33, 0x21, 0x2f, 0xdd, 0x89, 0x56, 0xaf, 0xa4, 0x93, 0xec, 0x11, 0x1d, 0xf6, 0xad, 0xe7, 0x87,
	0x77, 0x0f, 0xfa, 0xff, 0x5c, 0x17, 0x79, 0x90, 0x08, 0x25, 0x1e, 0x87, 0xf2, 0xd2, 0x65, 0xaa,
	0xc8, 0x03, 0x6e, 0x28, 0x26, 0x3e, 0x7f, 0x5d, 0xe4, 0xec, 0x21, 0xdd, 0x6e, 0x2d, 0xd4, 0x57,
	0x26, 0xab, 0x65, 0x05, 0x6b, 0xec, 0x56, 0xa8, 0xf0, 0xea, 0xa9, 0xac, 0x80, 0x31, 0x3a, 0x74,
	0x80, 0x15, 0x1f, 0x86, 0xcf, 0x43, 0xcc, 0x76, 0xe9, 0xa8, 0xa8, 0x73, 0xf8, 0xce, 0x47, 0x41,
	0x6c, 0x13, 0xf6, 0x80, 0xce, 0x43, 0x47, 0x57, 0x54, 0x60, 0x9d, 0xac, 0x0c, 0x1f, 0x27, 0x24,
	0x1d, 0xb4, 0x0d, 0xcf, 0x3a, 0x91, 0xed, 0xd3, 0x4d, 0xfb, 0x49, 0x62, 0x5e, 0xd4, 0x2a, 0xfb,
	0x0c, 0x0d, 0x9f, 0x24, 0x24, 0xdd, 0x14, 0xb3, 0x4e, 0x7b, 0x07, 0x8d, 0x67, 0xe6, 0xd2, 0x49,
	0x3e, 0x0d, 0x56, 0x88, 0x17, 0x2f, 0xe8, 0xd4, 0xcf, 0x27, 0xe0, 0x8b, 0x65, 0x4f, 0xd7, 0x63,
	0x95, 0x5a, 0x71, 0x92, 0x0c, 0xd2, 0xd9, 0x7f, 0xb6, 0xe0, 0x57, 0xd5, 0x4e, 0x7b, 0xa2, 0xd5,
	0xe3, 0xfd, 0x7e, 0x85, 0xe1, 0x0c, 0x8c, 0xce, 0x8f, 0x6b, 0x87, 0xcd, 0xa9, 0xc6, 0x4a, 0x96,
	0x42, 0x7e, 0xdb, 0x89, 0x0e, 0xdf, 0xd2, 0xed, 0x25, 0x6a, 0x6b, 0x97, 0xe5, 0x95, 0x75, 0x80,
	0x47, 0x1f, 0xde, 0xb0, 0xe7, 0x74, 0xeb, 0xc8, 0x98, 0xb2, 0xe9, 0xc1, 0xec, 0x5f, 0x8c, 0xd7,
	0xf6, 0x76, 0xfe, 0xd2, 0xc2, 0xfd, 0x17, 0xd1, 0x4b, 0x7e, 0x7d, 0x1b, 0x47, 0x37, 0xb7, 0x71,
	0x74, 0xbd, 0x8a, 0xc9, 0xcd, 0x2a, 0x26, 0xbf, 0x56, 0x31, 0xf9, 0xf9, 0x3b, 0x8e, 0xce, 0xc7,
	0xe1, 0xb1, 0x3c, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xcb, 0xb7, 0xd8, 0x5e, 0x02, 0x00,
	0x00,
}
