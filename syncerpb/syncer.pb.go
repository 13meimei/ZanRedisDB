// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syncer.proto

/*
	Package syncerpb is a generated protocol buffer package.

	It is generated from these files:
		syncer.proto

	It has these top-level messages:
		RpcErr
		RaftLogData
		RaftReqs
		RaftApplySnapReq
		RaftApplySnapStatusReq
		RaftApplySnapStatusRsp
		SyncedRaftReq
		SyncedRaftRsp
*/
package syncerpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RaftLogType int32

const (
	// indicate what stored in the data in raftlog
	EntryNormalRaw     RaftLogType = 0
	EntrySnapshotRawKV RaftLogType = 1
)

var RaftLogType_name = map[int32]string{
	0: "EntryNormalRaw",
	1: "EntrySnapshotRawKV",
}
var RaftLogType_value = map[string]int32{
	"EntryNormalRaw":     0,
	"EntrySnapshotRawKV": 1,
}

func (x RaftLogType) String() string {
	return proto.EnumName(RaftLogType_name, int32(x))
}
func (RaftLogType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSyncer, []int{0} }

type RaftApplySnapStatus int32

const (
	ApplyUnknown         RaftApplySnapStatus = 0
	ApplyWaitingTransfer RaftApplySnapStatus = 1
	ApplyTransferSuccess RaftApplySnapStatus = 2
	ApplyWaiting         RaftApplySnapStatus = 3
	ApplySuccess         RaftApplySnapStatus = 4
	ApplyFailed          RaftApplySnapStatus = 5
	ApplyMissing         RaftApplySnapStatus = 6
	ApplyOutofdate       RaftApplySnapStatus = 7
)

var RaftApplySnapStatus_name = map[int32]string{
	0: "ApplyUnknown",
	1: "ApplyWaitingTransfer",
	2: "ApplyTransferSuccess",
	3: "ApplyWaiting",
	4: "ApplySuccess",
	5: "ApplyFailed",
	6: "ApplyMissing",
	7: "ApplyOutofdate",
}
var RaftApplySnapStatus_value = map[string]int32{
	"ApplyUnknown":         0,
	"ApplyWaitingTransfer": 1,
	"ApplyTransferSuccess": 2,
	"ApplyWaiting":         3,
	"ApplySuccess":         4,
	"ApplyFailed":          5,
	"ApplyMissing":         6,
	"ApplyOutofdate":       7,
}

func (x RaftApplySnapStatus) String() string {
	return proto.EnumName(RaftApplySnapStatus_name, int32(x))
}
func (RaftApplySnapStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorSyncer, []int{1} }

type RpcErr struct {
	ErrType int32  `protobuf:"varint,1,opt,name=err_type,json=errType,proto3" json:"err_type,omitempty"`
	ErrCode int32  `protobuf:"varint,2,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	ErrMsg  string `protobuf:"bytes,3,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *RpcErr) Reset()                    { *m = RpcErr{} }
func (m *RpcErr) String() string            { return proto.CompactTextString(m) }
func (*RpcErr) ProtoMessage()               {}
func (*RpcErr) Descriptor() ([]byte, []int) { return fileDescriptorSyncer, []int{0} }

type RaftLogData struct {
	Type RaftLogType `protobuf:"varint,1,opt,name=type,proto3,enum=syncerpb.RaftLogType" json:"type,omitempty"`
	// the name for source cluster, if there are multi different source clusters for syncer,
	// we can separate them.
	ClusterName string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// raft group for different partition has different name, so
	// we can make sure (term-index) is increased in same raft group.
	// (term-index) will be checked while replaying in remote cluster
	RaftGroupName string `protobuf:"bytes,3,opt,name=raft_group_name,json=raftGroupName,proto3" json:"raft_group_name,omitempty"`
	Term          uint64 `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Index         uint64 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	RaftTimestamp int64  `protobuf:"varint,6,opt,name=raft_timestamp,json=raftTimestamp,proto3" json:"raft_timestamp,omitempty"`
	Data          []byte `protobuf:"bytes,15,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RaftLogData) Reset()                    { *m = RaftLogData{} }
func (m *RaftLogData) String() string            { return proto.CompactTextString(m) }
func (*RaftLogData) ProtoMessage()               {}
func (*RaftLogData) Descriptor() ([]byte, []int) { return fileDescriptorSyncer, []int{1} }

type RaftReqs struct {
	RaftLog []*RaftLogData `protobuf:"bytes,1,rep,name=raft_log,json=raftLog" json:"raft_log,omitempty"`
}

func (m *RaftReqs) Reset()                    { *m = RaftReqs{} }
func (m *RaftReqs) String() string            { return proto.CompactTextString(m) }
func (*RaftReqs) ProtoMessage()               {}
func (*RaftReqs) Descriptor() ([]byte, []int) { return fileDescriptorSyncer, []int{2} }

type RaftApplySnapReq struct {
	// the name for source cluster, if there are multi different source clusters for syncer,
	// we can separate them.
	ClusterName string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// raft group for different partition has different name, so
	// we can make sure (term-index) is increased in same raft group.
	// (term-index) will be checked while replaying in remote cluster
	RaftGroupName string `protobuf:"bytes,3,opt,name=raft_group_name,json=raftGroupName,proto3" json:"raft_group_name,omitempty"`
	Term          uint64 `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Index         uint64 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	RaftTimestamp int64  `protobuf:"varint,6,opt,name=raft_timestamp,json=raftTimestamp,proto3" json:"raft_timestamp,omitempty"`
	SyncAddr      string `protobuf:"bytes,7,opt,name=sync_addr,json=syncAddr,proto3" json:"sync_addr,omitempty"`
	SyncPath      string `protobuf:"bytes,8,opt,name=sync_path,json=syncPath,proto3" json:"sync_path,omitempty"`
	Data          []byte `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RaftApplySnapReq) Reset()                    { *m = RaftApplySnapReq{} }
func (m *RaftApplySnapReq) String() string            { return proto.CompactTextString(m) }
func (*RaftApplySnapReq) ProtoMessage()               {}
func (*RaftApplySnapReq) Descriptor() ([]byte, []int) { return fileDescriptorSyncer, []int{3} }

type RaftApplySnapStatusReq struct {
	// the name for source cluster, if there are multi different source clusters for syncer,
	// we can separate them.
	ClusterName string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// raft group for different partition has different name, so
	// we can make sure (term-index) is increased in same raft group.
	// (term-index) will be checked while replaying in remote cluster
	RaftGroupName string `protobuf:"bytes,3,opt,name=raft_group_name,json=raftGroupName,proto3" json:"raft_group_name,omitempty"`
	Term          uint64 `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Index         uint64 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *RaftApplySnapStatusReq) Reset()                    { *m = RaftApplySnapStatusReq{} }
func (m *RaftApplySnapStatusReq) String() string            { return proto.CompactTextString(m) }
func (*RaftApplySnapStatusReq) ProtoMessage()               {}
func (*RaftApplySnapStatusReq) Descriptor() ([]byte, []int) { return fileDescriptorSyncer, []int{4} }

type RaftApplySnapStatusRsp struct {
	Status    RaftApplySnapStatus `protobuf:"varint,1,opt,name=status,proto3,enum=syncerpb.RaftApplySnapStatus" json:"status,omitempty"`
	Progress  uint64              `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	StatusMsg string              `protobuf:"bytes,3,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
}

func (m *RaftApplySnapStatusRsp) Reset()                    { *m = RaftApplySnapStatusRsp{} }
func (m *RaftApplySnapStatusRsp) String() string            { return proto.CompactTextString(m) }
func (*RaftApplySnapStatusRsp) ProtoMessage()               {}
func (*RaftApplySnapStatusRsp) Descriptor() ([]byte, []int) { return fileDescriptorSyncer, []int{5} }

type SyncedRaftReq struct {
	ClusterName   string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	RaftGroupName string `protobuf:"bytes,2,opt,name=raft_group_name,json=raftGroupName,proto3" json:"raft_group_name,omitempty"`
}

func (m *SyncedRaftReq) Reset()                    { *m = SyncedRaftReq{} }
func (m *SyncedRaftReq) String() string            { return proto.CompactTextString(m) }
func (*SyncedRaftReq) ProtoMessage()               {}
func (*SyncedRaftReq) Descriptor() ([]byte, []int) { return fileDescriptorSyncer, []int{6} }

type SyncedRaftRsp struct {
	Term  uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *SyncedRaftRsp) Reset()                    { *m = SyncedRaftRsp{} }
func (m *SyncedRaftRsp) String() string            { return proto.CompactTextString(m) }
func (*SyncedRaftRsp) ProtoMessage()               {}
func (*SyncedRaftRsp) Descriptor() ([]byte, []int) { return fileDescriptorSyncer, []int{7} }

func init() {
	proto.RegisterType((*RpcErr)(nil), "syncerpb.RpcErr")
	proto.RegisterType((*RaftLogData)(nil), "syncerpb.RaftLogData")
	proto.RegisterType((*RaftReqs)(nil), "syncerpb.RaftReqs")
	proto.RegisterType((*RaftApplySnapReq)(nil), "syncerpb.RaftApplySnapReq")
	proto.RegisterType((*RaftApplySnapStatusReq)(nil), "syncerpb.RaftApplySnapStatusReq")
	proto.RegisterType((*RaftApplySnapStatusRsp)(nil), "syncerpb.RaftApplySnapStatusRsp")
	proto.RegisterType((*SyncedRaftReq)(nil), "syncerpb.SyncedRaftReq")
	proto.RegisterType((*SyncedRaftRsp)(nil), "syncerpb.SyncedRaftRsp")
	proto.RegisterEnum("syncerpb.RaftLogType", RaftLogType_name, RaftLogType_value)
	proto.RegisterEnum("syncerpb.RaftApplySnapStatus", RaftApplySnapStatus_name, RaftApplySnapStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CrossClusterAPI service

type CrossClusterAPIClient interface {
	ApplyRaftReqs(ctx context.Context, in *RaftReqs, opts ...grpc.CallOption) (*RpcErr, error)
	GetSyncedRaft(ctx context.Context, in *SyncedRaftReq, opts ...grpc.CallOption) (*SyncedRaftRsp, error)
	NotifyTransferSnap(ctx context.Context, in *RaftApplySnapReq, opts ...grpc.CallOption) (*RpcErr, error)
	NotifyApplySnap(ctx context.Context, in *RaftApplySnapReq, opts ...grpc.CallOption) (*RpcErr, error)
	GetApplySnapStatus(ctx context.Context, in *RaftApplySnapStatusReq, opts ...grpc.CallOption) (*RaftApplySnapStatusRsp, error)
}

type crossClusterAPIClient struct {
	cc *grpc.ClientConn
}

func NewCrossClusterAPIClient(cc *grpc.ClientConn) CrossClusterAPIClient {
	return &crossClusterAPIClient{cc}
}

func (c *crossClusterAPIClient) ApplyRaftReqs(ctx context.Context, in *RaftReqs, opts ...grpc.CallOption) (*RpcErr, error) {
	out := new(RpcErr)
	err := grpc.Invoke(ctx, "/syncerpb.CrossClusterAPI/ApplyRaftReqs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crossClusterAPIClient) GetSyncedRaft(ctx context.Context, in *SyncedRaftReq, opts ...grpc.CallOption) (*SyncedRaftRsp, error) {
	out := new(SyncedRaftRsp)
	err := grpc.Invoke(ctx, "/syncerpb.CrossClusterAPI/GetSyncedRaft", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crossClusterAPIClient) NotifyTransferSnap(ctx context.Context, in *RaftApplySnapReq, opts ...grpc.CallOption) (*RpcErr, error) {
	out := new(RpcErr)
	err := grpc.Invoke(ctx, "/syncerpb.CrossClusterAPI/NotifyTransferSnap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crossClusterAPIClient) NotifyApplySnap(ctx context.Context, in *RaftApplySnapReq, opts ...grpc.CallOption) (*RpcErr, error) {
	out := new(RpcErr)
	err := grpc.Invoke(ctx, "/syncerpb.CrossClusterAPI/NotifyApplySnap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crossClusterAPIClient) GetApplySnapStatus(ctx context.Context, in *RaftApplySnapStatusReq, opts ...grpc.CallOption) (*RaftApplySnapStatusRsp, error) {
	out := new(RaftApplySnapStatusRsp)
	err := grpc.Invoke(ctx, "/syncerpb.CrossClusterAPI/GetApplySnapStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CrossClusterAPI service

type CrossClusterAPIServer interface {
	ApplyRaftReqs(context.Context, *RaftReqs) (*RpcErr, error)
	GetSyncedRaft(context.Context, *SyncedRaftReq) (*SyncedRaftRsp, error)
	NotifyTransferSnap(context.Context, *RaftApplySnapReq) (*RpcErr, error)
	NotifyApplySnap(context.Context, *RaftApplySnapReq) (*RpcErr, error)
	GetApplySnapStatus(context.Context, *RaftApplySnapStatusReq) (*RaftApplySnapStatusRsp, error)
}

func RegisterCrossClusterAPIServer(s *grpc.Server, srv CrossClusterAPIServer) {
	s.RegisterService(&_CrossClusterAPI_serviceDesc, srv)
}

func _CrossClusterAPI_ApplyRaftReqs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftReqs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrossClusterAPIServer).ApplyRaftReqs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.CrossClusterAPI/ApplyRaftReqs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrossClusterAPIServer).ApplyRaftReqs(ctx, req.(*RaftReqs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrossClusterAPI_GetSyncedRaft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncedRaftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrossClusterAPIServer).GetSyncedRaft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.CrossClusterAPI/GetSyncedRaft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrossClusterAPIServer).GetSyncedRaft(ctx, req.(*SyncedRaftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrossClusterAPI_NotifyTransferSnap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftApplySnapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrossClusterAPIServer).NotifyTransferSnap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.CrossClusterAPI/NotifyTransferSnap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrossClusterAPIServer).NotifyTransferSnap(ctx, req.(*RaftApplySnapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrossClusterAPI_NotifyApplySnap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftApplySnapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrossClusterAPIServer).NotifyApplySnap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.CrossClusterAPI/NotifyApplySnap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrossClusterAPIServer).NotifyApplySnap(ctx, req.(*RaftApplySnapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrossClusterAPI_GetApplySnapStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftApplySnapStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrossClusterAPIServer).GetApplySnapStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncerpb.CrossClusterAPI/GetApplySnapStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrossClusterAPIServer).GetApplySnapStatus(ctx, req.(*RaftApplySnapStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CrossClusterAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syncerpb.CrossClusterAPI",
	HandlerType: (*CrossClusterAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyRaftReqs",
			Handler:    _CrossClusterAPI_ApplyRaftReqs_Handler,
		},
		{
			MethodName: "GetSyncedRaft",
			Handler:    _CrossClusterAPI_GetSyncedRaft_Handler,
		},
		{
			MethodName: "NotifyTransferSnap",
			Handler:    _CrossClusterAPI_NotifyTransferSnap_Handler,
		},
		{
			MethodName: "NotifyApplySnap",
			Handler:    _CrossClusterAPI_NotifyApplySnap_Handler,
		},
		{
			MethodName: "GetApplySnapStatus",
			Handler:    _CrossClusterAPI_GetApplySnapStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syncer.proto",
}

func (m *RpcErr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcErr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.ErrType))
	}
	if m.ErrCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	return i, nil
}

func (m *RaftLogData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLogData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.Type))
	}
	if len(m.ClusterName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.ClusterName)))
		i += copy(dAtA[i:], m.ClusterName)
	}
	if len(m.RaftGroupName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.RaftGroupName)))
		i += copy(dAtA[i:], m.RaftGroupName)
	}
	if m.Term != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.Term))
	}
	if m.Index != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.Index))
	}
	if m.RaftTimestamp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.RaftTimestamp))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *RaftReqs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftReqs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RaftLog) > 0 {
		for _, msg := range m.RaftLog {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSyncer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RaftApplySnapReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftApplySnapReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClusterName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.ClusterName)))
		i += copy(dAtA[i:], m.ClusterName)
	}
	if len(m.RaftGroupName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.RaftGroupName)))
		i += copy(dAtA[i:], m.RaftGroupName)
	}
	if m.Term != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.Term))
	}
	if m.Index != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.Index))
	}
	if m.RaftTimestamp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.RaftTimestamp))
	}
	if len(m.SyncAddr) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.SyncAddr)))
		i += copy(dAtA[i:], m.SyncAddr)
	}
	if len(m.SyncPath) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.SyncPath)))
		i += copy(dAtA[i:], m.SyncPath)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *RaftApplySnapStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftApplySnapStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClusterName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.ClusterName)))
		i += copy(dAtA[i:], m.ClusterName)
	}
	if len(m.RaftGroupName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.RaftGroupName)))
		i += copy(dAtA[i:], m.RaftGroupName)
	}
	if m.Term != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.Term))
	}
	if m.Index != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *RaftApplySnapStatusRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftApplySnapStatusRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.Status))
	}
	if m.Progress != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.Progress))
	}
	if len(m.StatusMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.StatusMsg)))
		i += copy(dAtA[i:], m.StatusMsg)
	}
	return i, nil
}

func (m *SyncedRaftReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncedRaftReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClusterName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.ClusterName)))
		i += copy(dAtA[i:], m.ClusterName)
	}
	if len(m.RaftGroupName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(len(m.RaftGroupName)))
		i += copy(dAtA[i:], m.RaftGroupName)
	}
	return i, nil
}

func (m *SyncedRaftRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncedRaftRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Term != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.Term))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSyncer(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func encodeVarintSyncer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RpcErr) Size() (n int) {
	var l int
	_ = l
	if m.ErrType != 0 {
		n += 1 + sovSyncer(uint64(m.ErrType))
	}
	if m.ErrCode != 0 {
		n += 1 + sovSyncer(uint64(m.ErrCode))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	return n
}

func (m *RaftLogData) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSyncer(uint64(m.Type))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	l = len(m.RaftGroupName)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovSyncer(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovSyncer(uint64(m.Index))
	}
	if m.RaftTimestamp != 0 {
		n += 1 + sovSyncer(uint64(m.RaftTimestamp))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	return n
}

func (m *RaftReqs) Size() (n int) {
	var l int
	_ = l
	if len(m.RaftLog) > 0 {
		for _, e := range m.RaftLog {
			l = e.Size()
			n += 1 + l + sovSyncer(uint64(l))
		}
	}
	return n
}

func (m *RaftApplySnapReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	l = len(m.RaftGroupName)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovSyncer(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovSyncer(uint64(m.Index))
	}
	if m.RaftTimestamp != 0 {
		n += 1 + sovSyncer(uint64(m.RaftTimestamp))
	}
	l = len(m.SyncAddr)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	l = len(m.SyncPath)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	return n
}

func (m *RaftApplySnapStatusReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	l = len(m.RaftGroupName)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovSyncer(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovSyncer(uint64(m.Index))
	}
	return n
}

func (m *RaftApplySnapStatusRsp) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSyncer(uint64(m.Status))
	}
	if m.Progress != 0 {
		n += 1 + sovSyncer(uint64(m.Progress))
	}
	l = len(m.StatusMsg)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	return n
}

func (m *SyncedRaftReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	l = len(m.RaftGroupName)
	if l > 0 {
		n += 1 + l + sovSyncer(uint64(l))
	}
	return n
}

func (m *SyncedRaftRsp) Size() (n int) {
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovSyncer(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovSyncer(uint64(m.Index))
	}
	return n
}

func sovSyncer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSyncer(x uint64) (n int) {
	return sovSyncer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RpcErr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcErr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcErr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrType", wireType)
			}
			m.ErrType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLogData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLogData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLogData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (RaftLogType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftTimestamp", wireType)
			}
			m.RaftTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftReqs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftReqs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftReqs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftLog = append(m.RaftLog, &RaftLogData{})
			if err := m.RaftLog[len(m.RaftLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftApplySnapReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftApplySnapReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftApplySnapReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftTimestamp", wireType)
			}
			m.RaftTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftApplySnapStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftApplySnapStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftApplySnapStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSyncer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftApplySnapStatusRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftApplySnapStatusRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftApplySnapStatusRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (RaftApplySnapStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncedRaftReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncedRaftReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncedRaftReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSyncer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RaftGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncedRaftRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncedRaftRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncedRaftRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSyncer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSyncer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSyncer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyncer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSyncer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSyncer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSyncer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSyncer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSyncer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("syncer.proto", fileDescriptorSyncer) }

var fileDescriptorSyncer = []byte{
	// 727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0x8d, 0xf3, 0x9f, 0x9b, 0xa4, 0x19, 0xf9, 0xeb, 0xd7, 0x0e, 0x41, 0x8d, 0xc2, 0x48, 0xa0,
	0xd0, 0x45, 0x41, 0x45, 0x08, 0x55, 0x62, 0x13, 0xd2, 0x52, 0x21, 0x68, 0xa9, 0x26, 0x85, 0x4a,
	0xdd, 0x44, 0x6e, 0xc6, 0x99, 0x46, 0x24, 0x63, 0xd7, 0x76, 0x54, 0xf2, 0x0a, 0x48, 0xec, 0x79,
	0x12, 0x9e, 0xa1, 0xcb, 0x3e, 0x02, 0x2d, 0x1b, 0x1e, 0x80, 0x25, 0x0b, 0x64, 0x4f, 0x32, 0x49,
	0x68, 0xca, 0xcf, 0x0a, 0x76, 0xf6, 0xb9, 0xc7, 0xe7, 0xfa, 0x1e, 0xdf, 0x3b, 0x03, 0x05, 0x39,
	0x0c, 0xda, 0x54, 0xac, 0x71, 0xc1, 0x14, 0xc3, 0xd9, 0x70, 0xc7, 0x8f, 0xca, 0x8b, 0x3e, 0xf3,
	0x99, 0x01, 0xef, 0xe9, 0x55, 0x18, 0x77, 0x0e, 0x20, 0xed, 0xf2, 0xf6, 0x96, 0x10, 0xf8, 0x06,
	0x64, 0xa9, 0x10, 0x2d, 0x35, 0xe4, 0xd4, 0x46, 0x55, 0x54, 0x4b, 0xb9, 0x19, 0x2a, 0xc4, 0xfe,
	0x90, 0xd3, 0x71, 0xa8, 0xcd, 0x3c, 0x6a, 0xc7, 0xa3, 0x50, 0x83, 0x79, 0x14, 0x2f, 0x83, 0x5e,
	0xb6, 0xfa, 0xd2, 0xb7, 0x13, 0x55, 0x54, 0xcb, 0xb9, 0x69, 0x2a, 0xc4, 0x8e, 0xf4, 0x9d, 0x2f,
	0x08, 0xf2, 0x2e, 0xe9, 0xa8, 0x17, 0xcc, 0xdf, 0x24, 0x8a, 0xe0, 0xbb, 0x90, 0x8c, 0xa4, 0x17,
	0xd6, 0xff, 0x5f, 0x1b, 0xdf, 0x6b, 0x6d, 0x44, 0xd2, 0x89, 0x5c, 0x43, 0xc1, 0xb7, 0xa0, 0xd0,
	0xee, 0x0d, 0xa4, 0xa2, 0xa2, 0x15, 0x90, 0x7e, 0x98, 0x32, 0xe7, 0xe6, 0x47, 0xd8, 0x2e, 0xe9,
	0x53, 0x7c, 0x07, 0x4a, 0x82, 0x74, 0x54, 0xcb, 0x17, 0x6c, 0xc0, 0x43, 0x56, 0x98, 0xbe, 0xa8,
	0xe1, 0x6d, 0x8d, 0x1a, 0x1e, 0x86, 0xa4, 0xa2, 0xa2, 0x6f, 0x27, 0xab, 0xa8, 0x96, 0x74, 0xcd,
	0x1a, 0x2f, 0x42, 0xaa, 0x1b, 0x78, 0xf4, 0xad, 0x9d, 0x32, 0x60, 0xb8, 0xc1, 0xb7, 0x61, 0xc1,
	0x28, 0xaa, 0x6e, 0x9f, 0x4a, 0x45, 0xfa, 0xdc, 0x4e, 0x57, 0x51, 0x2d, 0x11, 0x0a, 0xee, 0x8f,
	0x41, 0x2d, 0xe8, 0x11, 0x45, 0xec, 0x52, 0x15, 0xd5, 0x0a, 0xae, 0x59, 0x3b, 0x8f, 0x21, 0xab,
	0x8b, 0x70, 0xe9, 0x89, 0xc4, 0xf7, 0x21, 0x6b, 0x64, 0x7a, 0xcc, 0xb7, 0x51, 0x35, 0x51, 0xcb,
	0xcf, 0x29, 0x55, 0xfb, 0xe1, 0x66, 0x44, 0xb8, 0x71, 0xbe, 0x21, 0xb0, 0x74, 0xa0, 0xce, 0x79,
	0x6f, 0xd8, 0x0c, 0x08, 0x77, 0xe9, 0xc9, 0x3f, 0x6d, 0xc1, 0x4d, 0xc8, 0xe9, 0x8a, 0x5a, 0xc4,
	0xf3, 0x84, 0x9d, 0x31, 0x29, 0x4d, 0x97, 0xd5, 0x3d, 0x4f, 0x44, 0x41, 0x4e, 0xd4, 0xb1, 0x9d,
	0x9d, 0x04, 0xf7, 0x88, 0x3a, 0x8e, 0xcc, 0xcb, 0x4d, 0x99, 0xf7, 0x1e, 0xc1, 0xd2, 0x4c, 0xf9,
	0x4d, 0x45, 0xd4, 0x40, 0xfe, 0x2d, 0x13, 0x9c, 0x77, 0xd7, 0xdc, 0x47, 0x72, 0xfc, 0x10, 0xd2,
	0xd2, 0x6c, 0x46, 0x4d, 0xbc, 0x32, 0xfb, 0xb2, 0x3f, 0x9e, 0x18, 0x91, 0x71, 0x19, 0xb2, 0x5c,
	0x30, 0x5f, 0x50, 0x29, 0x4d, 0x09, 0x49, 0x37, 0xda, 0xe3, 0x15, 0x80, 0x90, 0x35, 0x35, 0x41,
	0xb9, 0x10, 0xd1, 0x43, 0x74, 0x08, 0xc5, 0xa6, 0x4e, 0xe1, 0x8d, 0xfa, 0xeb, 0x8a, 0x25, 0xe8,
	0xb7, 0x2c, 0x89, 0xcf, 0xb1, 0xc4, 0xd9, 0x98, 0xd1, 0x96, 0x3c, 0xf2, 0x08, 0xcd, 0xf3, 0x28,
	0x3e, 0xe5, 0xd1, 0xea, 0x46, 0x34, 0xda, 0xe6, 0xf3, 0x80, 0x61, 0x61, 0x2b, 0x50, 0x62, 0xb8,
	0xcb, 0x44, 0x9f, 0xf4, 0x5c, 0x72, 0x6a, 0xc5, 0xf0, 0x12, 0x60, 0x83, 0x69, 0x3f, 0xe4, 0x31,
	0x53, 0x2e, 0x39, 0x7d, 0xfe, 0xda, 0x42, 0xab, 0x1f, 0x11, 0xfc, 0x37, 0xc7, 0x2c, 0x6c, 0x41,
	0xc1, 0x40, 0xaf, 0x82, 0x37, 0x01, 0x3b, 0x0d, 0xac, 0x18, 0xb6, 0x61, 0xd1, 0x20, 0x07, 0xa4,
	0xab, 0xba, 0x81, 0xbf, 0x2f, 0x48, 0x20, 0x3b, 0x54, 0x58, 0x28, 0x8a, 0x8c, 0xa1, 0xe6, 0xa0,
	0xdd, 0xa6, 0x52, 0x5a, 0xf1, 0x48, 0x65, 0x74, 0xc6, 0x4a, 0x44, 0xc8, 0x98, 0x93, 0xc4, 0x25,
	0xc8, 0x1b, 0xe4, 0x29, 0xe9, 0xf6, 0xa8, 0x67, 0xa5, 0x22, 0xca, 0x4e, 0x57, 0x4a, 0x7d, 0x28,
	0xad, 0x0b, 0x32, 0xc8, 0xcb, 0x81, 0x62, 0x1d, 0x8f, 0x28, 0x6a, 0x65, 0xd6, 0xbf, 0xc6, 0xa1,
	0xd4, 0x10, 0x4c, 0xca, 0x46, 0xe8, 0x75, 0x7d, 0xef, 0x19, 0x7e, 0x04, 0x45, 0xc3, 0x8b, 0xa6,
	0x1f, 0xcf, 0x76, 0x84, 0xc6, 0xca, 0xd6, 0x14, 0x66, 0xbe, 0xb4, 0x4e, 0x0c, 0x37, 0xa0, 0xb8,
	0x4d, 0xd5, 0xc4, 0x7e, 0xbc, 0x3c, 0x21, 0xcd, 0x3c, 0x78, 0x79, 0x7e, 0x40, 0x72, 0x27, 0x86,
	0x37, 0x01, 0xef, 0x32, 0xd5, 0xed, 0x4c, 0x7c, 0x08, 0x08, 0xc7, 0xe5, 0x6b, 0x9a, 0x52, 0x8b,
	0xcd, 0xbb, 0x4a, 0x1d, 0x4a, 0xa1, 0x4a, 0xc4, 0xfc, 0x63, 0x89, 0x43, 0xc0, 0xdb, 0xf4, 0xca,
	0x8b, 0x56, 0x7f, 0x3e, 0x1d, 0xf4, 0xa4, 0xfc, 0x0b, 0x86, 0x2e, 0xf2, 0x89, 0x7d, 0x76, 0x51,
	0x89, 0x9d, 0x5f, 0x54, 0x62, 0x67, 0x97, 0x15, 0x74, 0x7e, 0x59, 0x41, 0x9f, 0x2e, 0x2b, 0xe8,
	0xc3, 0xe7, 0x4a, 0xec, 0x28, 0x6d, 0x7e, 0x60, 0x0f, 0xbe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x1d,
	0x48, 0xec, 0xbe, 0xf0, 0x06, 0x00, 0x00,
}
